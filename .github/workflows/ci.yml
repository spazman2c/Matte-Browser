name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Rust code quality checks
  rust-checks:
    name: Rust Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.75.0
          override: true
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check code formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check for unused dependencies
        run: cargo udeps --all-targets --all-features

      - name: Audit dependencies
        run: cargo audit --deny warnings

  # Rust tests on multiple platforms
  test:
    name: Test (${{ matrix.os }}, ${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            rust: 1.75.0
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            rust: 1.75.0
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            rust: 1.75.0
          - os: macos-latest
            target: x86_64-apple-darwin
            rust: 1.75.0
          - os: macos-latest
            target: aarch64-apple-darwin
            rust: 1.75.0

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake pkg-config libssl-dev
          sudo apt-get install -y libx11-dev libxrandr-dev libxfixes-dev libxcursor-dev
          sudo apt-get install -y libxcomposite-dev libxdamage-dev libxext-dev libxrender-dev
          sudo apt-get install -y libxss-dev libxtst-dev libnss3-dev libatk-bridge2.0-dev
          sudo apt-get install -y libgtk-3-dev libgdk-pixbuf2.0-dev libasound2-dev
          sudo apt-get install -y libpulse-dev libdbus-1-dev libudev-dev libevdev-dev
          sudo apt-get install -y libinput-dev libxkbcommon-dev libwayland-dev
          sudo apt-get install -y libxcb1-dev libxcb-render0-dev libxcb-shape0-dev
          sudo apt-get install -y libxcb-xfixes0-dev libxcb-keysyms1-dev libxcb-icccm4-dev
          sudo apt-get install -y libxcb-image0-dev libxcb-shm0-dev libxcb-util1-dev
          sudo apt-get install -y libxcb-xinerama0-dev libxcb-xkb-dev libxkbcommon-x11-dev
          sudo apt-get install -y libvulkan-dev libegl1-mesa-dev libgles2-mesa-dev
          sudo apt-get install -y libgl1-mesa-dev libglu1-mesa-dev libdrm-dev libgbm-dev
          sudo apt-get install -y libxcb-dri3-dev libxcb-present-dev libxcb-sync-dev
          sudo apt-get install -y libxcb-xf86dri-dev libxcb-dri2-dev libxcb-glx-dev
          sudo apt-get install -y libxcb-xv-dev libxcb-randr0-dev libxcb-record0-dev
          sudo apt-get install -y libxcb-xvmc-dev libxcb-xv0-dev libxcb-aux0-dev
          sudo apt-get install -y libxcb-event-dev libxcb-render-util0-dev libxcb-errors-dev

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          # Windows dependencies are typically handled by the Rust toolchain
          echo "Windows dependencies handled by MSVC toolchain"

      - name: Install dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # macOS dependencies are typically available by default
          echo "macOS dependencies handled by system"

      - name: Run tests
        run: cargo test --target ${{ matrix.target }} --all-features

      - name: Run tests with sanitizers (Linux only)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'x86_64-unknown-linux-gnu'
        env:
          RUSTFLAGS: "-Z sanitizer=address"
        run: |
          cargo test --target x86_64-unknown-linux-gnu --all-features

  # Cross-compilation tests
  cross-compile:
    name: Cross-compile (${{ matrix.target }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-pc-windows-gnu
          - aarch64-unknown-linux-gnu
          - i686-unknown-linux-gnu

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.75.0
          target: ${{ matrix.target }}
          override: true

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update
          if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
            sudo apt-get install -y gcc-mingw-w64-x86-64 g++-mingw-w64-x86-64
          elif [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          elif [ "${{ matrix.target }}" = "i686-unknown-linux-gnu" ]; then
            sudo apt-get install -y gcc-multilib g++-multilib
          fi

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.target }}-cargo-

      - name: Build
        run: cargo build --target ${{ matrix.target }} --release

      - name: Check
        run: cargo check --target ${{ matrix.target }} --all-features

  # Hermetic build test
  hermetic-build:
    name: Hermetic Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build hermetic Docker image
        run: docker build -f Dockerfile.hermetic -t matte-browser-hermetic .

      - name: Run hermetic build
        run: |
          docker run --rm -v $(pwd):/home/builder/matte-browser:ro matte-browser-hermetic

  # Security checks
  security:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.75.0
          override: true

      - name: Run cargo audit
        run: cargo audit --deny warnings

      - name: Run cargo deny
        uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check

      - name: Check for secrets
        run: |
          # Install trufflehog if not available
          if ! command -v trufflehog &> /dev/null; then
            curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          fi
          trufflehog --only-verified --fail .

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.75.0
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run benchmarks
        run: |
          # Run any performance benchmarks we have
          echo "Running performance benchmarks..."
          # cargo bench --all-features

  # Documentation generation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.75.0
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Generate documentation
        run: cargo doc --all-features --no-deps

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: target/doc/

  # Build artifacts
  build-artifacts:
    name: Build Artifacts
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: matte-browser-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: matte-browser-windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: matte-browser-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: matte-browser-macos-aarch64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.75.0
          target: ${{ matrix.target }}
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-cargo-

      - name: Build release
        run: cargo build --target ${{ matrix.target }} --release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.artifact_name }}
          path: target/${{ matrix.target }}/release/matte-browser*

  # Final status check
  status:
    name: Status Check
    runs-on: ubuntu-latest
    needs: [rust-checks, test, cross-compile, hermetic-build, security, benchmarks, docs, build-artifacts]
    if: always()
    steps:
      - name: Check job status
        run: |
          echo "All jobs completed:"
          echo "rust-checks: ${{ needs.rust-checks.result }}"
          echo "test: ${{ needs.test.result }}"
          echo "cross-compile: ${{ needs.cross-compile.result }}"
          echo "hermetic-build: ${{ needs.hermetic-build.result }}"
          echo "security: ${{ needs.security.result }}"
          echo "benchmarks: ${{ needs.benchmarks.result }}"
          echo "docs: ${{ needs.docs.result }}"
          echo "build-artifacts: ${{ needs.build-artifacts.result }}"
          
          # Fail if any required job failed
          if [[ "${{ needs.rust-checks.result }}" == "failure" ]] || \
             [[ "${{ needs.test.result }}" == "failure" ]] || \
             [[ "${{ needs.security.result }}" == "failure" ]]; then
            exit 1
          fi
